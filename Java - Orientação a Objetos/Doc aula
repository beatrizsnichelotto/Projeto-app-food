https://orientacaoaobjetosaplicadaaoja.club.hotmart.com/lesson/meLqZMmY7n/seja-bem-vindo-cronograma-das-aulas

usuario: ti@smartbr.com
senha: p1nc3l@2021

*********************************************************************

AULA 1


- Code Java - compilado (byte code) 
 	- Usa em qlqr s.o (que tenha a máquina virtual java) - JVM
- JAVA JDK - instalar no pc pra ter as ferramentas de programação JAVA *kit de ferramentas* (Rodar IDE)
	- JAVA Jre - cliente tem que ter no pc pra rodar o sistema
JAVA CODING PACK - 


*********************************************************************

ORIENTAÇÃO A OBJETOS 

- Forma (gerar objeto) = CLASSE (estrutura criada para a partir dela criar quantos objetos quisermos)
- A partir de 1 classe pode ter mais de um objeto diferente
	Ex: Classe: Produto
		    codigo 
		    descricao
		    precoVenda
		    precoCusto

		    + vender();

	Ex: Objeto: produto1
		    codigo 01
		    descricao Fone de ouvido
		    precoVenda 80,00
		    precoCusto 40,00

		    + vender();

	Ex: Objeto: produto2
		    codigo 05
		    descricao Mouse
		    precoVenda 40,00
		    precoCusto 20,00

		    + vender();

- Caracteristicas = ATRIBUTOS
	Ex: codigo 
            descricao
            precoVenda
	    precoCusto

 
- Ações = MÉTODOS
	Ex: + vender();
	    + listar(Produto produto);
	    + exlcuir(Produto produto);
	    + consuktar(int codigo);

*********************************************************************

- CODIGO JAVA EXECUTAVEL INICIO/PADRÃO:

public class App {
  
 public static void main(String[] args) {

 *escrever código aqui*

 }

    }

*********************************************************************
ProdutoDAO
+ listar();
+ salvar(Produto produto);
+ excluir(Produto produto);
+ consultar(int codigo);

ClienteDAO
+ listar();
+ salvar(Cliente cliente);
+ excluir(Cliente cliente);
+ consultar(int codigo);

DAOGenerico<T>
+ listar();
+ salvar(T registro);
+ excluir(T registro);
+ consultar(int codigo);

DAOGenerico<Produto> daoProduto = new DAOGenerico();
DAOGenerico<Cliente> daoCliente = new DAOGenerico();

***************************************************************************************************************************************************************************************************************
App cod:

import javax.swing.JOptionPane;

public class App  {
  


 public static void main(String[] args) {

    Produto produto01 = new Produto();
    produto01.setCodigo(1);
    produto01.setDescricao("Fone de ouvido");
    produto01.setPrecoVenda(80.00); 
    produto01.setPrecoCusto(40.00);
    produto01.setSaldoEstoque(5);

    Produto produto02 = new Produto();
    produto02.setCodigo(5);
    produto02.setDescricao("Mouse");
    produto02.setPrecoVenda(40.00);
    produto02.setPrecoCusto(20.00);
    produto02.setSaldoEstoque(1);

    JOptionPane.showMessageDialog(null, "O produto é " + produto01.getDescricao() + " - Saldo: " + produto01.getSaldoEstoque());

    JOptionPane.showMessageDialog(null, "O produto é " + produto02.getDescricao() + " - Saldo: " + produto02.getSaldoEstoque());

    produto01.vender(1.0); // ENCAPSULAMENTO
    produto02.alterarPreco(100.0);

    JOptionPane.showMessageDialog(null,  produto01.getDescricao() + " - Saldo: " + produto01.getSaldoEstoque() + " - " + produto01.getPrecoVenda());
    
    JOptionPane.showMessageDialog(null,  produto01.getDescricao() + " - Saldo: " + produto02.getSaldoEstoque() + " - " + produto02.getPrecoVenda());

}

    }
--------------------------------------------------------------------
Produto cod:



public class Produto {
   
    private Integer codigo;

    private String descricao;

    private double precoVenda;

    private double precoCusto;

    private double saldoEstoque;

    public void vender(double quantidadeVendida) { //não retorna nenhuma informação
        saldoEstoque = saldoEstoque - quantidadeVendida;

    }

    public  void alterarPreco(double novoPrecoCusto) {
        precoCusto = novoPrecoCusto;
        precoVenda = precoCusto * 1.50;
    }


    public void setCodigo(Integer codigo) {
    this.codigo = codigo;
    }
    public Integer getCodigo() {
    return this.codigo;
    }

    public void setDescricao(String descricao) {
    this.descricao = descricao;
    }
    public String getDescricao() {
    return this.descricao;
    }

    public void setPrecoVenda(double precoVenda) {
    this.precoVenda = precoVenda;
    }
    public double getPrecoVenda() {
    return this.precoVenda;
    }

    public void setPrecoCusto(double precoCusto) {
    this.precoCusto = precoCusto;
    }
    public double getPrecoCusto() {
    return this.precoCusto;
    }

    public void setSaldoEstoque(double saldoEstoque) {
        this.saldoEstoque = saldoEstoque;
    }
    public double getSaldoEstoque() {
        return this.saldoEstoque;
    }
}

***************************************************************************************************************************************************************************************************************
AULA 2

Set: Define valor do atributo
Get: obter valor do atributo

Ex: 

private int numero;

public int getNumero() {
        return this.numero;
    }

    public void setNumero(int numero) {
        this.numero = numero;

    }
***************************************************************************************************************************************************************************************************************
AULA 3

INTERFACE = Elementos que uma CLASSE deve ter (especificação de como uma classe deve ser)


Ex: Concessionaria > implementa > serializable


IMPLEMENTAÇAO DE INTERFACE:

- Toda vez que criar uma CLASSE que implementa a INTERFACE, vai ser obrigado implentar, escrenvendo o que o MÉTODO vai fazer na CLASSE
- Obriga todas as CLASSES que implementarem a INTERFACE a terem os mesmos MÉTODOS 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*HERANÇA = trabalha com PROTECTD > permite que as CLASSES filhas acesse
	   EX: CLASSE A : herda de ''CLASSE PAI'' (todos os métodos) / CLASSE B : herda de ''CLASSE PAI'' (todos os métodos)
***detalhe: Se utilizar "PRIVATE" as CLASSES FILHAS não terão acesso
            Se utilizar "PUBLIC" as CLASSES FILHAS e todas outras terão acesso
            Correto utilizar "PROTECTED" 

objTIpoA.x("asd")
Permite que as classes filhas passem o objeto 



*POLIMORFISMO = PAI > FILHO : FILHO > PAI 

***************************************************************************************************************************************************************************************************************
AULA 4

Padrão Singleton: Garantee que exista apenas uma instância de determinada classe em todo o projeto.

- Todos os construtores devem ser privados (PRIVATE) 
- Criar na classe um atributo que seja do tipo da própria calsse que seja privado e estático (private static) (nome = instancia)
- Criar um método publico e estático (public static) que retorne a instancia guardada no atributo que nos acabaos de crirar na classe. 
OBS: O método precisa verificar se ainstância já existe, ou não. Se não existe, cria com um new um objeto novo, guarda no atributo e retorna.

***************************************************************************************************************************************************************************************************************
Aula 5 

Xadrez
Modelo, criação de classes base

***************************************************************************************************************************************************************************************************************
Aula 6

Xadrez
Elementos visuais, movimento de peças e controle de vez

***************************************************************************************************************************************************************************************************************
Aula 7

Thread: Main > Thread principal
	Thread 1 > Request 1
	Thread 2 > Request 2
	Thread 3 > Request 3
	Thread 4 > Request 4

- Thread é uma classe criada
- Para transformar uma classe em uma classe de thread é preciso implementar uma interface

*Java trabalha com referencia 

***Finalizar jogo de xadrez


***************************************************************************************************************************************************************************************************************
AULA 8 

Sistema CRUD (Definição de modelo de dados e acesso ao banco de dados)

IDE: NetBeans

Utilizar Maven

Criar entidade: Pasta > New > Other > Persistence > Entity Class
(cod)


***psvm + tab = public static void main(String[] args) {

toString:

integer numero = 8;
String x = "Aula" + numero ;


*(Tem que importar sempre)

@ManyToOne = uma pessoa tem várias contas


***************************************************************************************************************************************************************************************************************
AULA 9

CRUD
NETBEANS

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UTILIZADO NA CLASSE PRINCIPAL:
Exemplo: SALVAR NOVA PESSOA




public class Principal {
    
    public static void main(String[] args) {

       try {
           Pessoa p = new Pessoa();
           p.setNome("Lucas Amigo");
           p.setCpf("11111111111");
           
 
           DAO daoPessoa = new DAO<Pessoa>();
           p = (Pessoa) daoPessoa.salvar(p);
                   
           
             System.out.println("O ID do objeto salvo é" + p.getId());
        } catch (Exception ex) {
            ex.printStackTrace();

        }
      
       
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Para gerar 'EntityManager' utilizar soemente uma fábrica de 'EntityManager'.

Criar Classes DAO = DATA AX OBJECTS = Classes de acesso ao banco de dados (são classes específicas)
Geralmente se utilizam estruturas pré-programadas
Ex: Listar serviços, salvar no banco de dados, excluir do banco de dados, buscar por nome



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


*ANTES DE ESTOURAR UMA EXCEÇÃO 

Utilizar: entityManager.getTransaction().rollback();


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DAO PARA TODAS ENTIDADES: PADRÃO
Para utilizar DAO genérico: DAO<T> 



package com.mycompany.aula08crud.dados;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;


public class DAO<T> {
    
    private EntityManager entityManager;
    
    private Class classe;
        
    private DAO() {
        
    }
    
    public DAO(Class classe) {
        entityManager = AcessoBanco.getInstance().createEntityManager();
        this.classe = classe;
    }
 
    public T salvar(T objeto) throws Exception {
        
        entityManager.getTransaction().begin();
        try {
            objeto = entityManager.merge(objeto);
            entityManager.getTransaction().commit();
            return objeto;
        } catch (Exception ex) {
            entityManager.getTransaction().rollback();
            throw ex;
        }
    }
    
    public void excluir (T objeto) throws Exception {
        entityManager.getTransaction().begin();
        try {
            objeto = entityManager.merge(objeto); //obrigatorio utilizar update para conseguir excluir
            entityManager.remove(objeto);
            entityManager.getTransaction().commit();
        } catch (Exception ex) {
            entityManager.getTransaction().rollback();
            throw ex;
        }
        
    }
    
    public T procurarPorID(Long id) throws Exception {
        entityManager.getTransaction().begin();
        try {
           T objeto = (T )entityManager.find(this.classe, id);
            entityManager.getTransaction().commit();
            return objeto;
        } catch (Exception ex) {
            entityManager.getTransaction().rollback();
            throw ex;
        }
    }
    
    public List<T> listarTodos() throws Exception {
        entityManager.getTransaction().begin();
        try {
            Query qyConsulta = entityManager.createQuery("Select o from "+this.classe.getSimpleName()+" o");
            List<T> retorno = qyConsulta.getResultList();
            
            entityManager.getTransaction().commit();
            return retorno;
        } catch (Exception ex) {
            entityManager.getTransaction().rollback();
            throw ex;
        }
           
     }

}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DAO PARA CONTA:

public class ContaDAO extends DAO<Conta> {
    
    public ContaDAO() {
        super(Conta.class);
    }
    
    public List<Conta> listarPorPessoa(Pessoa pessoa) {
        entityManager.getTransaction().begin();
        try {
            Query qyConsulta = entityManager.createQuery("Select o from Conta where o.pessoa = :pess");
            qyConsulta.setParameter("pess", pessoa);
            List<Conta> retorno = qyConsulta.getResultList();
            
            entityManager.getTransaction().commit();
            return retorno;
        } catch (Exception ex) {
            entityManager.getTransaction().rollback();
            throw ex;
        }
    }
    
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Aula 11 - Bonus - CRUD

Framework: 

Spring Boot

Dependencies:
Spring boot devTools :
Lombok : Gera Getters and Setters, equals...
Spring web : inclui aplicações que vao usar spring MVC(camadas, modelos, visual e controle)
Thymeleaf : permite usar arquivos html - parte visual (compilador de tamplate)
Spring data

Gera arquivo zip > extrair > vem como Maven e posso utilizar no netBeans



Interface de "conta" por exemplo: utilizado para realziar consultas e não fazer implementações no sistema
Ex: 


package com.mycompany.aula08crud.crudexemplo.repositorios;

import com.mycompany.aula08crud.modelo.Conta;
import com.mycompany.aula08crud.modelo.Pessoa;
import java.util.List;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;


public interface ContaRepository extends CrudRepository<Conta, Long>{
    
    @Query("select c from Conta c where c.pessoa = :pessoa")
    public List<Conta> listarPorPessoa(@Param("pessoa") Pessoa pessoa);
    
    public List<Conta> findByDescricaoContainingIgnoreCase(String descricao);
     
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------***bootsrap: componentes que se adequam a tela do sistema(automatizar)


FINALIZADO 



























